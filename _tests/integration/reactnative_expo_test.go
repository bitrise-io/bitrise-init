package integration

import (
	"fmt"
	"path/filepath"
	"strings"
	"testing"

	"github.com/bitrise-io/bitrise-init/models"
	"github.com/bitrise-io/bitrise-init/steps"
	"github.com/bitrise-io/go-utils/command"
	"github.com/bitrise-io/go-utils/fileutil"
	"github.com/bitrise-io/go-utils/pathutil"
	"github.com/stretchr/testify/require"
)

func TestReactNativeExpo(t *testing.T) {
	tmpDir, err := pathutil.NormalizedOSTempDirPath("__reactnative_expo__")
	require.NoError(t, err)

	t.Log("Managed workflow, no tests")
	{
		sampleAppDir := filepath.Join(tmpDir, "managed-notest")
		sampleAppURL := "https://github.com/bitrise-io/sample-apps-expo.git"
		gitClone(t, sampleAppDir, sampleAppURL)

		cmd := command.New(binPath(), "--ci", "config", "--dir", sampleAppDir, "--output-dir", sampleAppDir)
		out, err := cmd.RunAndReturnTrimmedCombinedOutput()
		require.NoError(t, err, out)

		scanResultPth := filepath.Join(sampleAppDir, "result.yml")

		result, err := fileutil.ReadStringFromFile(scanResultPth)
		require.NoError(t, err)

		validateConfigExpectation(t, "Managed Expo Workflow, no tests", strings.TrimSpace(managedExpoResultsYML), strings.TrimSpace(result))
	}

	t.Log("Managed workflow with tests")
	{
		sampleAppDir := filepath.Join(tmpDir, "managed-test")
		sampleAppURL := "https://github.com/bitrise-io/Bitrise-React-Native-Expo-Sample.git"

		gitClone(t, sampleAppDir, sampleAppURL)

		cmd := command.New(binPath(), "--ci", "config", "--dir", sampleAppDir, "--output-dir", sampleAppDir)
		out, err := cmd.RunAndReturnTrimmedCombinedOutput()
		require.NoError(t, err, out)

		scanResultPth := filepath.Join(sampleAppDir, "result.yml")

		result, err := fileutil.ReadStringFromFile(scanResultPth)
		require.NoError(t, err)

		validateConfigExpectation(t, "Managed Expo Workflow with tests", strings.TrimSpace(managedExpo2ResultsYML), strings.TrimSpace(result))
	}

	t.Log("Bare workflow")
	{
		sampleAppDir := filepath.Join(tmpDir, "bare")
		sampleAppURL := "https://github.com/bitrise-io/sample-apps-expo.git"
		gitCloneBranch(t, sampleAppDir, sampleAppURL, "bare")

		cmd := command.New(binPath(), "--ci", "config", "--dir", sampleAppDir, "--output-dir", sampleAppDir)
		out, err := cmd.RunAndReturnTrimmedCombinedOutput()
		require.NoError(t, err, out)

		scanResultPth := filepath.Join(sampleAppDir, "result.yml")

		result, err := fileutil.ReadStringFromFile(scanResultPth)
		require.NoError(t, err)

		validateConfigExpectation(t, "Bare Expo Workflow", strings.TrimSpace(sampleAppsExpoBareResultYML), strings.TrimSpace(result))
	}
}

var managedExpoVersions = []interface{}{
	models.FormatVersion,

	steps.ActivateSSHKeyVersion,
	steps.GitCloneVersion,
	steps.ScriptVersion,
	steps.YarnVersion,
	steps.ScriptVersion,
	steps.ExpoDetachVersion,
	steps.InstallMissingAndroidToolsVersion,
	steps.AndroidBuildVersion,
	steps.CertificateAndProfileInstallerVersion,
	steps.XcodeArchiveVersion,
	steps.DeployToBitriseIoVersion,
}

var managedExpoResultsYML = fmt.Sprintf(`options:
  react-native:
    title: iOS bundle identifier
    summary: |-
      Key expo/ios/bundleIdentifier not present in 'app.json'.

      Will add the Expo Eject Step to the Workflow to generate the native iOS project, so the IPA can be exported.
      For your convenience, define it here temporarily. To set this value permanently run 'expo eject' in a local environment and commit 'app.json' changes.
      For example: 'com.sample.myapp'.
    env_key: EXPO_BARE_IOS_BUNLDE_ID
    type: user_input
    value_map:
      "":
        title: The iOS project path generated by running 'expo eject' locally
        summary: |-
          Will add the Expo Eject Step to the Workflow to generate the native iOS project, so it can be built and archived.
          Run 'expo eject' in a local environment to determine this value. This experiment then can be undone by deleting the ios and android directories. See https://docs.expo.io/bare/customizing/ for more details.
          For example: './ios/myproject.xcworkspace'.
        env_key: BITRISE_PROJECT_PATH
        type: selector_optional
        value_map:
          ios/exposample.xcworkspace:
            title: Scheme name
            summary: An Xcode scheme defines a collection of targets to build, a configuration
              to use when building, and a collection of tests to execute. Only shared
              schemes are detected automatically but you can use any scheme as a target
              on Bitrise. You can change the scheme at any time in your Env Vars.
            env_key: BITRISE_SCHEME
            type: selector_optional
            value_map:
              exposample:
                title: iOS Development team ID
                summary: |-
                  The Apple Development Team that the iOS version of the app belongs to. Will be used to override code signing settings. See https://devcenter.bitrise.io/getting-started/getting-started-with-expo-apps/#signing-and-exporting-your-ios-app-for-deployment for more details.

                  Will add the Expo Eject Step to the Workflow to generate the native iOS project, so it can be built and archived.
                  Run 'expo eject' in a local environment to determine this value. This experiment then can be undone by deleting the ios and android directories.
                  For example: '1MZX23ABCD4'.
                env_key: BITRISE_IOS_DEVELOPMENT_TEAM
                type: user_input
                value_map:
                  "":
                    title: Distribution method
                    summary: The export method used to create an .ipa file in your
                      builds, stored as an Environment Variable. You can change this
                      at any time, or even create several .ipa files with different
                      export methods in the same build.
                    env_key: BITRISE_DISTRIBUTION_METHOD
                    type: selector
                    value_map:
                      ad-hoc:
                        title: Android package name
                        summary: |-
                          Key expo/android/package not present in 'app.json'.

                          Will add the Expo Eject Step to the Workflow to generate the native Android project, so the bundle (AAB) can be built.
                          For your convenience, define it here temporarily. To set this value permanently run 'expo eject' in a local environment and commit 'app.json' changes.
                          For example: 'com.sample.myapp'.
                        env_key: EXPO_BARE_ANDROID_PACKAGE
                        type: user_input
                        value_map:
                          "":
                            title: The root directory of an Android project
                            summary: The root directory of your Android project, stored
                              as an Environment Variable. In your Workflows, you can
                              specify paths relative to this path. You can change
                              this at any time.
                            env_key: PROJECT_LOCATION
                            type: selector
                            value_map:
                              ./android:
                                title: Module
                                summary: Modules provide a container for your Android
                                  project's source code, resource files, and app level
                                  settings, such as the module-level build file and
                                  Android manifest file. Each module can be independently
                                  built, tested, and debugged. You can add new modules
                                  to your Bitrise builds at any time.
                                env_key: MODULE
                                type: user_input
                                value_map:
                                  app:
                                    title: Variant
                                    summary: Your Android build variant. You can add
                                      variants at any time, as well as further configure
                                      your existing variants later.
                                    env_key: VARIANT
                                    type: user_input_optional
                                    value_map:
                                      Release:
                                        config: react-native-expo-config
                      app-store:
                        title: Android package name
                        summary: |-
                          Key expo/android/package not present in 'app.json'.

                          Will add the Expo Eject Step to the Workflow to generate the native Android project, so the bundle (AAB) can be built.
                          For your convenience, define it here temporarily. To set this value permanently run 'expo eject' in a local environment and commit 'app.json' changes.
                          For example: 'com.sample.myapp'.
                        env_key: EXPO_BARE_ANDROID_PACKAGE
                        type: user_input
                        value_map:
                          "":
                            title: The root directory of an Android project
                            summary: The root directory of your Android project, stored
                              as an Environment Variable. In your Workflows, you can
                              specify paths relative to this path. You can change
                              this at any time.
                            env_key: PROJECT_LOCATION
                            type: selector
                            value_map:
                              ./android:
                                title: Module
                                summary: Modules provide a container for your Android
                                  project's source code, resource files, and app level
                                  settings, such as the module-level build file and
                                  Android manifest file. Each module can be independently
                                  built, tested, and debugged. You can add new modules
                                  to your Bitrise builds at any time.
                                env_key: MODULE
                                type: user_input
                                value_map:
                                  app:
                                    title: Variant
                                    summary: Your Android build variant. You can add
                                      variants at any time, as well as further configure
                                      your existing variants later.
                                    env_key: VARIANT
                                    type: user_input_optional
                                    value_map:
                                      Release:
                                        config: react-native-expo-config
                      development:
                        title: Android package name
                        summary: |-
                          Key expo/android/package not present in 'app.json'.

                          Will add the Expo Eject Step to the Workflow to generate the native Android project, so the bundle (AAB) can be built.
                          For your convenience, define it here temporarily. To set this value permanently run 'expo eject' in a local environment and commit 'app.json' changes.
                          For example: 'com.sample.myapp'.
                        env_key: EXPO_BARE_ANDROID_PACKAGE
                        type: user_input
                        value_map:
                          "":
                            title: The root directory of an Android project
                            summary: The root directory of your Android project, stored
                              as an Environment Variable. In your Workflows, you can
                              specify paths relative to this path. You can change
                              this at any time.
                            env_key: PROJECT_LOCATION
                            type: selector
                            value_map:
                              ./android:
                                title: Module
                                summary: Modules provide a container for your Android
                                  project's source code, resource files, and app level
                                  settings, such as the module-level build file and
                                  Android manifest file. Each module can be independently
                                  built, tested, and debugged. You can add new modules
                                  to your Bitrise builds at any time.
                                env_key: MODULE
                                type: user_input
                                value_map:
                                  app:
                                    title: Variant
                                    summary: Your Android build variant. You can add
                                      variants at any time, as well as further configure
                                      your existing variants later.
                                    env_key: VARIANT
                                    type: user_input_optional
                                    value_map:
                                      Release:
                                        config: react-native-expo-config
                      enterprise:
                        title: Android package name
                        summary: |-
                          Key expo/android/package not present in 'app.json'.

                          Will add the Expo Eject Step to the Workflow to generate the native Android project, so the bundle (AAB) can be built.
                          For your convenience, define it here temporarily. To set this value permanently run 'expo eject' in a local environment and commit 'app.json' changes.
                          For example: 'com.sample.myapp'.
                        env_key: EXPO_BARE_ANDROID_PACKAGE
                        type: user_input
                        value_map:
                          "":
                            title: The root directory of an Android project
                            summary: The root directory of your Android project, stored
                              as an Environment Variable. In your Workflows, you can
                              specify paths relative to this path. You can change
                              this at any time.
                            env_key: PROJECT_LOCATION
                            type: selector
                            value_map:
                              ./android:
                                title: Module
                                summary: Modules provide a container for your Android
                                  project's source code, resource files, and app level
                                  settings, such as the module-level build file and
                                  Android manifest file. Each module can be independently
                                  built, tested, and debugged. You can add new modules
                                  to your Bitrise builds at any time.
                                env_key: MODULE
                                type: user_input
                                value_map:
                                  app:
                                    title: Variant
                                    summary: Your Android build variant. You can add
                                      variants at any time, as well as further configure
                                      your existing variants later.
                                    env_key: VARIANT
                                    type: user_input_optional
                                    value_map:
                                      Release:
                                        config: react-native-expo-config
configs:
  react-native:
    react-native-expo-config: |
      format_version: "%s"
      default_step_lib_source: https://github.com/bitrise-io/bitrise-steplib.git
      project_type: react-native
      trigger_map:
      - push_branch: '*'
        workflow: primary
      - pull_request_source_branch: '*'
        workflow: primary
      workflows:
        deploy:
          description: |
            Tests, builds and deploys the app.

            Next steps:
            - Check out [Getting started with Expo apps](https://devcenter.bitrise.io/en/getting-started/getting-started-with-expo-apps.html).
          steps:
          - activate-ssh-key@%s:
              run_if: '{{getenv "SSH_RSA_PRIVATE_KEY" | ne ""}}'
          - git-clone@%s: {}
          - script@%s:
              title: Do anything with Script step
          - yarn@%s:
              inputs:
              - command: install
          - script@%s:
              title: Set bundleIdentifier, packageName for Expo Eject
              inputs:
              - content: |-
                  #!/usr/bin/env bash
                  set -ex

                  appJson="app.json"
                  tmp="/tmp/app.json"
                  jq '.expo.android |= if has("package") or env.EXPO_BARE_ANDROID_PACKAGE == "" or env.EXPO_BARE_ANDROID_PACKAGE == null then . else .package = env.EXPO_BARE_ANDROID_PACKAGE end |
                  .expo.ios |= if has("bundleIdentifier") or env.EXPO_BARE_IOS_BUNLDE_ID == "" or env.EXPO_BARE_IOS_BUNLDE_ID == null then . else .bundleIdentifier = env.EXPO_BARE_IOS_BUNLDE_ID end' <${appJson} >${tmp}
                  [[ $?==0 ]] && mv -f ${tmp} ${appJson}
          - expo-detach@%s:
              inputs:
              - project_path: ./
          - install-missing-android-tools@%s:
              inputs:
              - gradlew_path: $PROJECT_LOCATION/gradlew
          - android-build@%s:
              inputs:
              - project_location: $PROJECT_LOCATION
              - module: $MODULE
              - variant: $VARIANT
          - certificate-and-profile-installer@%s: {}
          - xcode-archive@%s:
              inputs:
              - project_path: $BITRISE_PROJECT_PATH
              - scheme: $BITRISE_SCHEME
              - configuration: Release
              - distribution_method: $BITRISE_DISTRIBUTION_METHOD
              - xcconfig_content: |-
                  COMPILER_INDEX_STORE_ENABLE = NO
                  DEVELOPMENT_TEAM = $BITRISE_IOS_DEVELOPMENT_TEAM
          - deploy-to-bitrise-io@%s: {}
        primary:
          description: |
            Installs dependencies.

            Next steps:
            - Add tests to your project and run them.
            - Check out [Getting started with Expo apps](https://devcenter.bitrise.io/en/getting-started/getting-started-with-expo-apps.html).
          steps:
          - activate-ssh-key@4: {}
          - git-clone@6: {}
          - yarn@0:
              inputs:
              - command: install
          - deploy-to-bitrise-io@2: {}
warnings:
  react-native: []
warnings_with_recommendations:
  react-native: []
`, managedExpoVersions...)

var managedExpo2Versions = []interface{}{
	models.FormatVersion,
	// deploy
	steps.ActivateSSHKeyVersion,
	steps.GitCloneVersion,
	steps.ScriptVersion,
	steps.YarnVersion,
	steps.YarnVersion,
	steps.ExpoDetachVersion,
	steps.InstallMissingAndroidToolsVersion,
	steps.AndroidBuildVersion,
	steps.CertificateAndProfileInstallerVersion,
	steps.XcodeArchiveVersion,
	steps.DeployToBitriseIoVersion,
	// primary
	steps.ActivateSSHKeyVersion,
	steps.GitCloneVersion,
	steps.YarnVersion,
	steps.YarnVersion,
	steps.DeployToBitriseIoVersion,
}

var managedExpo2ResultsYML = fmt.Sprintf(`options:
  react-native:
    title: The iOS project path generated by running 'expo eject' locally
    summary: |-
      Will add the Expo Eject Step to the Workflow to generate the native iOS project, so it can be built and archived.
      Run 'expo eject' in a local environment to determine this value. This experiment then can be undone by deleting the ios and android directories. See https://docs.expo.io/bare/customizing/ for more details.
      For example: './ios/myproject.xcworkspace'.
    env_key: BITRISE_PROJECT_PATH
    type: selector_optional
    value_map:
      ios/todomvc.xcworkspace:
        title: Scheme name
        summary: An Xcode scheme defines a collection of targets to build, a configuration
          to use when building, and a collection of tests to execute. Only shared
          schemes are detected automatically but you can use any scheme as a target
          on Bitrise. You can change the scheme at any time in your Env Vars.
        env_key: BITRISE_SCHEME
        type: selector_optional
        value_map:
          todomvc:
            title: iOS Development team ID
            summary: |-
              The Apple Development Team that the iOS version of the app belongs to. Will be used to override code signing settings. See https://devcenter.bitrise.io/getting-started/getting-started-with-expo-apps/#signing-and-exporting-your-ios-app-for-deployment for more details.

              Will add the Expo Eject Step to the Workflow to generate the native iOS project, so it can be built and archived.
              Run 'expo eject' in a local environment to determine this value. This experiment then can be undone by deleting the ios and android directories.
              For example: '1MZX23ABCD4'.
            env_key: BITRISE_IOS_DEVELOPMENT_TEAM
            type: user_input
            value_map:
              "":
                title: Distribution method
                summary: The export method used to create an .ipa file in your builds,
                  stored as an Environment Variable. You can change this at any time,
                  or even create several .ipa files with different export methods
                  in the same build.
                env_key: BITRISE_DISTRIBUTION_METHOD
                type: selector
                value_map:
                  ad-hoc:
                    title: The root directory of an Android project
                    summary: The root directory of your Android project, stored as
                      an Environment Variable. In your Workflows, you can specify
                      paths relative to this path. You can change this at any time.
                    env_key: PROJECT_LOCATION
                    type: selector
                    value_map:
                      ./android:
                        title: Module
                        summary: Modules provide a container for your Android project's
                          source code, resource files, and app level settings, such
                          as the module-level build file and Android manifest file.
                          Each module can be independently built, tested, and debugged.
                          You can add new modules to your Bitrise builds at any time.
                        env_key: MODULE
                        type: user_input
                        value_map:
                          app:
                            title: Variant
                            summary: Your Android build variant. You can add variants
                              at any time, as well as further configure your existing
                              variants later.
                            env_key: VARIANT
                            type: user_input_optional
                            value_map:
                              Release:
                                config: react-native-expo-config
                  app-store:
                    title: The root directory of an Android project
                    summary: The root directory of your Android project, stored as
                      an Environment Variable. In your Workflows, you can specify
                      paths relative to this path. You can change this at any time.
                    env_key: PROJECT_LOCATION
                    type: selector
                    value_map:
                      ./android:
                        title: Module
                        summary: Modules provide a container for your Android project's
                          source code, resource files, and app level settings, such
                          as the module-level build file and Android manifest file.
                          Each module can be independently built, tested, and debugged.
                          You can add new modules to your Bitrise builds at any time.
                        env_key: MODULE
                        type: user_input
                        value_map:
                          app:
                            title: Variant
                            summary: Your Android build variant. You can add variants
                              at any time, as well as further configure your existing
                              variants later.
                            env_key: VARIANT
                            type: user_input_optional
                            value_map:
                              Release:
                                config: react-native-expo-config
                  development:
                    title: The root directory of an Android project
                    summary: The root directory of your Android project, stored as
                      an Environment Variable. In your Workflows, you can specify
                      paths relative to this path. You can change this at any time.
                    env_key: PROJECT_LOCATION
                    type: selector
                    value_map:
                      ./android:
                        title: Module
                        summary: Modules provide a container for your Android project's
                          source code, resource files, and app level settings, such
                          as the module-level build file and Android manifest file.
                          Each module can be independently built, tested, and debugged.
                          You can add new modules to your Bitrise builds at any time.
                        env_key: MODULE
                        type: user_input
                        value_map:
                          app:
                            title: Variant
                            summary: Your Android build variant. You can add variants
                              at any time, as well as further configure your existing
                              variants later.
                            env_key: VARIANT
                            type: user_input_optional
                            value_map:
                              Release:
                                config: react-native-expo-config
                  enterprise:
                    title: The root directory of an Android project
                    summary: The root directory of your Android project, stored as
                      an Environment Variable. In your Workflows, you can specify
                      paths relative to this path. You can change this at any time.
                    env_key: PROJECT_LOCATION
                    type: selector
                    value_map:
                      ./android:
                        title: Module
                        summary: Modules provide a container for your Android project's
                          source code, resource files, and app level settings, such
                          as the module-level build file and Android manifest file.
                          Each module can be independently built, tested, and debugged.
                          You can add new modules to your Bitrise builds at any time.
                        env_key: MODULE
                        type: user_input
                        value_map:
                          app:
                            title: Variant
                            summary: Your Android build variant. You can add variants
                              at any time, as well as further configure your existing
                              variants later.
                            env_key: VARIANT
                            type: user_input_optional
                            value_map:
                              Release:
                                config: react-native-expo-config
configs:
  react-native:
    react-native-expo-config: |
      format_version: "%s"
      default_step_lib_source: https://github.com/bitrise-io/bitrise-steplib.git
      project_type: react-native
      trigger_map:
      - push_branch: '*'
        workflow: primary
      - pull_request_source_branch: '*'
        workflow: primary
      workflows:
        deploy:
          description: |
            Tests, builds and deploys the app.

            Next steps:
            - Check out [Getting started with Expo apps](https://devcenter.bitrise.io/en/getting-started/getting-started-with-expo-apps.html).
          steps:
          - activate-ssh-key@%s:
              run_if: '{{getenv "SSH_RSA_PRIVATE_KEY" | ne ""}}'
          - git-clone@%s: {}
          - script@%s:
              title: Do anything with Script step
          - yarn@%s:
              inputs:
              - command: install
          - yarn@%s:
              inputs:
              - command: test
          - expo-detach@%s:
              inputs:
              - project_path: ./
          - install-missing-android-tools@%s:
              inputs:
              - gradlew_path: $PROJECT_LOCATION/gradlew
          - android-build@%s:
              inputs:
              - project_location: $PROJECT_LOCATION
              - module: $MODULE
              - variant: $VARIANT
          - certificate-and-profile-installer@%s: {}
          - xcode-archive@%s:
              inputs:
              - project_path: $BITRISE_PROJECT_PATH
              - scheme: $BITRISE_SCHEME
              - configuration: Release
              - distribution_method: $BITRISE_DISTRIBUTION_METHOD
              - xcconfig_content: |-
                  COMPILER_INDEX_STORE_ENABLE = NO
                  DEVELOPMENT_TEAM = $BITRISE_IOS_DEVELOPMENT_TEAM
          - deploy-to-bitrise-io@%s: {}
        primary:
          description: |
            Runs tests.

            Next steps:
            - Check out [Getting started with Expo apps](https://devcenter.bitrise.io/en/getting-started/getting-started-with-expo-apps.html).
          steps:
          - activate-ssh-key@%s: {}
          - git-clone@%s: {}
          - yarn@%s:
              inputs:
              - command: install
          - yarn@%s:
              inputs:
              - command: test
          - deploy-to-bitrise-io@%s: {}
warnings:
  react-native: []
warnings_with_recommendations:
  react-native: []
`, managedExpo2Versions...)

// Bare workflow is the same as react-native with native projects
var sampleAppsExpoBareVersions = []interface{}{
	models.FormatVersion,

	steps.ActivateSSHKeyVersion,
	steps.GitCloneVersion,
	steps.YarnVersion,
	steps.YarnVersion,
	steps.InstallMissingAndroidToolsVersion,
	steps.AndroidBuildVersion,
	steps.XcodeArchiveVersion,
	steps.DeployToBitriseIoVersion,

	steps.ActivateSSHKeyVersion,
	steps.GitCloneVersion,
	steps.YarnVersion,
	steps.YarnVersion,
	steps.DeployToBitriseIoVersion,
}

var sampleAppsExpoBareResultYML = fmt.Sprintf(`options:
  react-native:
    title: The root directory of an Android project
    summary: The root directory of your Android project, stored as an Environment
      Variable. In your Workflows, you can specify paths relative to this path. You
      can change this at any time.
    env_key: PROJECT_LOCATION
    type: selector
    value_map:
      android:
        title: Module
        summary: Modules provide a container for your Android project's source code,
          resource files, and app level settings, such as the module-level build file
          and Android manifest file. Each module can be independently built, tested,
          and debugged. You can add new modules to your Bitrise builds at any time.
        env_key: MODULE
        type: user_input
        value_map:
          app:
            title: Variant
            summary: Your Android build variant. You can add variants at any time,
              as well as further configure your existing variants later.
            env_key: VARIANT
            type: user_input_optional
            value_map:
              "":
                title: Project or Workspace path
                summary: The location of your Xcode project or Xcode workspace files,
                  stored as an Environment Variable. In your Workflows, you can specify
                  paths relative to this path.
                env_key: BITRISE_PROJECT_PATH
                type: selector
                value_map:
                  ios/ExpoSample.xcworkspace:
                    title: Scheme name
                    summary: An Xcode scheme defines a collection of targets to build,
                      a configuration to use when building, and a collection of tests
                      to execute. Only shared schemes are detected automatically but
                      you can use any scheme as a target on Bitrise. You can change
                      the scheme at any time in your Env Vars.
                    env_key: BITRISE_SCHEME
                    type: selector
                    value_map:
                      ExpoSample:
                        title: Distribution method
                        summary: The export method used to create an .ipa file in
                          your builds, stored as an Environment Variable. You can
                          change this at any time, or even create several .ipa files
                          with different export methods in the same build.
                        env_key: BITRISE_DISTRIBUTION_METHOD
                        type: selector
                        value_map:
                          ad-hoc:
                            config: react-native-android-ios-test-config
                          app-store:
                            config: react-native-android-ios-test-config
                          development:
                            config: react-native-android-ios-test-config
                          enterprise:
                            config: react-native-android-ios-test-config
configs:
  react-native:
    react-native-android-ios-test-config: |
      format_version: "%s"
      default_step_lib_source: https://github.com/bitrise-io/bitrise-steplib.git
      project_type: react-native
      trigger_map:
      - push_branch: '*'
        workflow: primary
      - pull_request_source_branch: '*'
        workflow: primary
      workflows:
        deploy:
          description: |
            Tests, builds and deploys the app using *Deploy to bitrise.io* Step.

            Next steps:
            - Set up an [Apple service with API key](https://devcenter.bitrise.io/en/accounts/connecting-to-services/connecting-to-an-apple-service-with-api-key.html).
            - Check out [Getting started with React Native apps](https://devcenter.bitrise.io/en/getting-started/getting-started-with-react-native-apps.html).
          steps:
          - activate-ssh-key@%s: {}
          - git-clone@%s: {}
          - yarn@%s:
              inputs:
              - command: install
          - yarn@%s:
              inputs:
              - command: test
          - install-missing-android-tools@%s:
              inputs:
              - gradlew_path: $PROJECT_LOCATION/gradlew
          - android-build@%s:
              inputs:
              - project_location: $PROJECT_LOCATION
          - cocoapods-install@2: {}
          - xcode-archive@%s:
              inputs:
              - project_path: $BITRISE_PROJECT_PATH
              - scheme: $BITRISE_SCHEME
              - distribution_method: $BITRISE_DISTRIBUTION_METHOD
              - configuration: Release
              - automatic_code_signing: api-key
          - deploy-to-bitrise-io@%s: {}
        primary:
          description: |
            Runs tests.

            Next steps:
            - Check out [Getting started with React Native apps](https://devcenter.bitrise.io/en/getting-started/getting-started-with-react-native-apps.html).
          steps:
          - activate-ssh-key@%s: {}
          - git-clone@%s: {}
          - yarn@%s:
              inputs:
              - command: install
          - yarn@%s:
              inputs:
              - command: test
          - deploy-to-bitrise-io@%s: {}
warnings:
  react-native: []
warnings_with_recommendations:
  react-native: []
`, sampleAppsExpoBareVersions...)
